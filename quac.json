{
    "registers": {
        "RZ": "R0",
        "FL": "R5",
        "PC": "R7"
    },
    "conditions": {
        "AL": {
            "short": "AL",
            "description": "Always",
            "machine": "0"
        },
        "Z": {
            "short": "Z",
            "description": "Zero",
            "machine": "1"
        }
    },
    "instructions": {
        "MOVL (imm)": {
            "syntax": "MOVL? <RD:reg>, <IMM8:uint8>",
            "machine": "0000 C RD IMM8",
            "semantic": "RD := 0000 0000 IMM8",
            "description": "Zero extends IMM8 to a 16 bit value and stores it in RD",
            "pseudo": false,
            "class": "imm"
        },
        "SETH (imm)": {
            "syntax": "SETH? <RD:reg>, <IMM8:uint8>",
            "machine": "0001 C RD IMM8",
            "semantic": "RD := (IMM8 << 8) | (RD & 0xFF)",
            "description": "Replaces the upper byte of RD with IMM8, leaving the lower byte unchanged",
            "pseudo": false,
            "class": "imm"
        },
        "STR (reg)": {
            "syntax": "STR? <RD:reg>, [<RA:reg>]",
            "machine": "0100 C RD 0 RA 0 000",
            "semantic": "mem[RA] := RD",
            "description": "Stores the value in RD in memory at the address in RA",
            "pseudo": false,
            "class": "mem"
        },
        "STR (imm)": {
            "syntax": "STR? <RD:reg>, <IMM7:uint7>",
            "machine": "0111 C RD 0 IMM7",
            "semantic": "mem[IMM7] := RD",
            "description": "Stores the value in RD in memory at the address at IMM7",
            "pseudo": false,
            "class": "mem"
        },
        "LDR (reg)": {
            "syntax": "LDR? <RD:reg>, [<RA:reg>]",
            "machine": "0101 C RD 0 RA 0 000",
            "semantic": "RD := mem[RA]",
            "description": "Loads the 16 bit value at the address in RA into RD",
            "pseudo": false,
            "class": "mem"
        },
        "LDR (imm)": {
            "syntax": "LDR? <RD:reg>, <IMM7:uint7>",
            "machine": "0111 C RD 1 IMM7",
            "semantic": "RD := mem[IMM7]",
            "description": "Loads the 16 bit value from the address IMM7 into RD",
            "pseudo": false,
            "class": "mem"
        },
        "ADD (reg)": {
            "syntax": "ADD? {<RD:reg?RA>, } <RA:reg>, <RB:reg>",
            "machine": "1000 C RD 0 RA 0 RB",
            "semantic": "RD := RA + RB",
            "description": "Adds the values in RA and RB and stores the result in RD",
            "pseudo": false,
            "class": "alu"
        },
        "ADD (imm)": {
            "syntax": "ADD? <RD:reg>, <IMM7:uint7>",
            "machine": "0011 C RD 0 IMM7",
            "semantic": "RD := RD + IMM7",
            "description": "Adds IMM7 to RD",
            "pseudo": false,
            "class": "alu"
        },
        "SUB (reg)": {
            "syntax": "SUB? {<RD:reg?RA>, } <RA:reg>, <RB:reg>",
            "machine": "1001 C RD 0 RA 0 RB",
            "semantic": "RD := RA - RB",
            "description": "Subtracts the value in RB from the value in RA and stores the result in RD",
            "pseudo": false,
            "class": "alu"
        },
        "SUB (imm)": {
            "syntax": "SUB? <RD:reg>, <IMM7:uint7>",
            "machine": "0011 C RD 1 IMM7",
            "semantic": "RD := RD - IMM7",
            "description": "subtracts IMM7 from RD",
            "pseudo": false,
            "class": "alu"
        },
        "AND (reg)": {
            "syntax": "AND? {<RD:reg?RA>, } <RA:reg>, <RB:reg>",
            "machine": "1010 C RD 0 RA 0 RB",
            "semantic": "RD := RA & RB",
            "description": "Bitwise ANDs the values in RA and RB and stores the result in RD",
            "pseudo": false,
            "class": "alu"
        },
        "ORR (reg)": {
            "syntax": "ORR? {<RD:reg?RA>, } <RA:reg>, <RB:reg>",
            "machine": "1011 C RD 0 RA 0 RB",
            "semantic": "RD := RA | RB",
            "description": "Bitwise ORs the values in RA and RB and stores the result in RD",
            "pseudo": false,
            "class": "alu"
        },
        "XOR (reg)": {
            "syntax": "XOR? {<RD:reg?RA>, } <RA:reg>, <RB:reg>",
            "machine": "1100 C RD 0 RA 0 RB",
            "semantic": "RD := RA ^ RB",
            "description": "Bitwise XORs the values in RA and RB and stores the result in RD",
            "pseudo": false,
            "class": "alu"
        },
        "NOT (reg)": {
            "syntax": "NOT? {<RD:reg?RA>, } <RA:reg>",
            "machine": "1101 C RD 0 RA 0 000",
            "semantic": "RD := ~RA",
            "description": "Bitwise NOTs the value in RA and stores the result in RD",
            "pseudo": false,
            "class": "alu"
        },
        "SHIFT (reg)": {
            "syntax": "SHIFT? {<RD:reg?RA>, } <RA:reg>, <RB:reg>, <D:uint1>",
            "machine": "1110 C RD 0 RA D RB",
            "semantic": "RD := RA << RB || RA >> RB",
            "description": "Shifts the value in RA left (0) or right (1) by the number of bits in RB and stores the result in RD",
            "pseudo": false,
            "class": "alu"
        },
        "NEG (reg)": {
            "syntax": "NEG? {<RD:reg?RA>, } <RA:reg>",
            "machine": "1111 C RD 0 RA 0 000",
            "semantic": "RD := -RA",
            "description": "Negates the value in RA and stores the result in RD",
            "pseudo": false,
            "class": "alu"
        },
        "MOV (reg)": {
            "syntax": "MOV? <RD:reg>, <RA:reg>",
            "machine": "1000 C RD 0 RA 0 000",
            "semantic": "RD := RA",
            "description": "Moves the contents of register RA into RD (alias for `ADD RD, RA, RZ`)",
            "pseudo": true,
            "class": "alu"
        },
        "JPR (reg)": {
            "syntax": "JPR? <RA:reg>",
            "machine": "1000 C 111 0 RA 0 000",
            "semantic": "PC := RA",
            "description": "Jumps to the absolute address in RA (alias for `ADD PC, RA, RZ`)",
            "pseudo": true,
            "class": "alu"
        },
        "CMP (reg)": {
            "syntax": "CMP? <RA:reg>, <RB:reg>",
            "machine": "1001 C 000 0 RA 0 RB",
            "semantic": "RA - RB",
            "description": "Performs RA - RB and discards the result. The flags are still updated. (alias for `SUB RZ, RA, RB`)",
            "pseudo": true,
            "class": "alu"
        },
        "TST (reg)": {
            "syntax": "TST? <RA:reg>",
            "machine": "1000 C 000 0 RA 0 000",
            "semantic": "RA + 0",
            "description": "Performs RA + 0 and discards the result. The flags are still updated, showing if RA is negative or zero. (alias for `ADD RZ, RA, RZ`)",
            "pseudo": true,
            "class": "alu"
        },
        "NOP": {
            "syntax": "NOP",
            "machine": "0000 0 000 0 000 0 000",
            "semantic": "do nothing",
            "description": "The 'do nothing' instruction. Running this has no effect on the state of the CPU. (alias for `MOVL RZ, 0`)",
            "pseudo": true,
            "class": "imm"
        },
        "JPM (reg)": {
            "syntax": "JPM? [<RA:reg>]",
            "machine": "0101 C 111 0 RA 0 000",
            "semantic": "PC := mem[RA]",
            "description": "Loads the value from the address stored in RA into the PC. (alias for `LDR PC, [RA]`)",
            "pseudo": true,
            "class": "mem"
        },
        "JP": {
            "syntax": "JP? <IMM8:uint8>",
            "machine": "0000 C 111 IMM8",
            "semantic": "PC := 0000 0000 IMM8",
            "description": "Jump to the given immediate value address. (alias for `MOVL PC, IMM8`)",
            "pseudo": true,
            "class": "imm"
        },
        "JPRB": {
            "syntax": "JPRB? <IMM7:uint7>",
            "machine": "0011 C 111 1 IMM7",
            "semantic": "PC := PC - IMM7",
            "description": "Jump the PC backward relative to the PC's current value. (alias for `ADD PC, PC, IMM7`)",
            "pseudo": true,
            "class": "imm"
        },
        "JPRF": {
            "syntax": "JPRF? <IMM7:uint7>",
            "machine": "0011 C 111 0 IMM7",
            "semantic": "PC := PC + IMM7",
            "description": "Jump the PC forward relative to the PC's current value. (alias for `ADD PC, PC, IMM7`)",
            "pseudo": true,
            "class": "imm"
        }
    }
}